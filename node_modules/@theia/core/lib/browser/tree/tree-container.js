"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var tree_widget_1 = require("./tree-widget");
var tree_model_1 = require("./tree-model");
var tree_1 = require("./tree");
var tree_selection_1 = require("./tree-selection");
var tree_selection_impl_1 = require("./tree-selection-impl");
var tree_expansion_1 = require("./tree-expansion");
var tree_navigation_1 = require("./tree-navigation");
var tree_decorator_1 = require("./tree-decorator");
function createTreeContainer(parent) {
    var child = new inversify_1.Container({ defaultScope: 'Singleton' });
    child.parent = parent;
    child.bind(tree_1.TreeImpl).toSelf();
    child.bind(tree_1.Tree).toDynamicValue(function (ctx) { return ctx.container.get(tree_1.TreeImpl); });
    child.bind(tree_selection_impl_1.TreeSelectionServiceImpl).toSelf();
    child.bind(tree_selection_1.TreeSelectionService).toDynamicValue(function (ctx) { return ctx.container.get(tree_selection_impl_1.TreeSelectionServiceImpl); });
    child.bind(tree_expansion_1.TreeExpansionServiceImpl).toSelf();
    child.bind(tree_expansion_1.TreeExpansionService).toDynamicValue(function (ctx) { return ctx.container.get(tree_expansion_1.TreeExpansionServiceImpl); });
    child.bind(tree_navigation_1.TreeNavigationService).toSelf();
    child.bind(tree_model_1.TreeModelImpl).toSelf();
    child.bind(tree_model_1.TreeModel).toDynamicValue(function (ctx) { return ctx.container.get(tree_model_1.TreeModelImpl); });
    child.bind(tree_widget_1.TreeWidget).toSelf();
    child.bind(tree_widget_1.TreeProps).toConstantValue(tree_widget_1.defaultTreeProps);
    child.bind(tree_decorator_1.TreeDecoratorService).to(tree_decorator_1.NoopTreeDecoratorService).inSingletonScope();
    return child;
}
exports.createTreeContainer = createTreeContainer;
//# sourceMappingURL=tree-container.js.map