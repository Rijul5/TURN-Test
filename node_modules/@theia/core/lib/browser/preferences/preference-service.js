"use strict";
/********************************************************************************
 * Copyright (C) 2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var coreutils_1 = require("@phosphor/coreutils");
var inversify_1 = require("inversify");
var common_1 = require("../../common");
var PreferenceScope;
(function (PreferenceScope) {
    PreferenceScope[PreferenceScope["User"] = 0] = "User";
    PreferenceScope[PreferenceScope["Workspace"] = 1] = "Workspace";
})(PreferenceScope = exports.PreferenceScope || (exports.PreferenceScope = {}));
exports.PreferenceService = Symbol('PreferenceService');
exports.PreferenceProviders = Symbol('PreferenceProviders');
var PreferenceServiceImpl = /** @class */ (function () {
    function PreferenceServiceImpl() {
        this.preferences = {};
        this.toDispose = new common_1.DisposableCollection();
        this.onPreferenceChangedEmitter = new common_1.Emitter();
        this.onPreferenceChanged = this.onPreferenceChangedEmitter.event;
        this.toDispose.push(this.onPreferenceChangedEmitter);
    }
    Object.defineProperty(PreferenceServiceImpl.prototype, "preferenceProviders", {
        get: function () {
            if (!this._preferenceProviders) {
                this._preferenceProviders = [
                    this.getPreferenceProvider(PreferenceScope.User),
                    this.getPreferenceProvider(PreferenceScope.Workspace)
                ];
            }
            return this._preferenceProviders;
        },
        enumerable: true,
        configurable: true
    });
    PreferenceServiceImpl.prototype.onStart = function () {
        // tslint:disable-next-line:no-unused-expression
        this.ready;
    };
    Object.defineProperty(PreferenceServiceImpl.prototype, "ready", {
        get: function () {
            var _this = this;
            if (!this._ready) {
                this._ready = new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                    var e_1, _a, _b, _c, preferenceProvider;
                    var _this = this;
                    return __generator(this, function (_d) {
                        switch (_d.label) {
                            case 0:
                                this.toDispose.push(common_1.Disposable.create(function () { return reject(); }));
                                try {
                                    for (_b = __values(this.preferenceProviders), _c = _b.next(); !_c.done; _c = _b.next()) {
                                        preferenceProvider = _c.value;
                                        this.toDispose.push(preferenceProvider);
                                        preferenceProvider.onDidPreferencesChanged(function (event) { return _this.reconcilePreferences(); });
                                    }
                                }
                                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                finally {
                                    try {
                                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                    }
                                    finally { if (e_1) throw e_1.error; }
                                }
                                // Wait until all the providers are ready to provide preferences.
                                return [4 /*yield*/, Promise.all(this.preferenceProviders.map(function (p) { return p.ready; }))];
                            case 1:
                                // Wait until all the providers are ready to provide preferences.
                                _d.sent();
                                this.reconcilePreferences();
                                resolve();
                                return [2 /*return*/];
                        }
                    });
                }); });
            }
            return this._ready;
        },
        enumerable: true,
        configurable: true
    });
    PreferenceServiceImpl.prototype.dispose = function () {
        this.toDispose.dispose();
    };
    PreferenceServiceImpl.prototype.reconcilePreferences = function () {
        var e_2, _a, e_3, _b;
        var preferenceChanges = {};
        var deleted = new Set(Object.keys(this.preferences));
        try {
            for (var _c = __values(this.preferenceProviders), _d = _c.next(); !_d.done; _d = _c.next()) {
                var preferenceProvider = _d.value;
                var preferences = preferenceProvider.getPreferences();
                // tslint:disable-next-line:forin
                for (var preferenceName in preferences) {
                    deleted.delete(preferenceName);
                    var oldValue = this.preferences[preferenceName];
                    var newValue = common_1.deepFreeze(preferences[preferenceName]);
                    if (oldValue !== undefined) {
                        /* Value changed */
                        if (!coreutils_1.JSONExt.deepEqual(oldValue, newValue)) {
                            preferenceChanges[preferenceName] = { preferenceName: preferenceName, newValue: newValue, oldValue: oldValue };
                            this.preferences[preferenceName] = newValue;
                        }
                        /* Value didn't change - Do nothing */
                    }
                    else {
                        /* New value without old value */
                        preferenceChanges[preferenceName] = { preferenceName: preferenceName, newValue: newValue };
                        this.preferences[preferenceName] = newValue;
                    }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            /* Deleted values */
            for (var deleted_1 = __values(deleted), deleted_1_1 = deleted_1.next(); !deleted_1_1.done; deleted_1_1 = deleted_1.next()) {
                var preferenceName = deleted_1_1.value;
                var oldValue = this.preferences[preferenceName];
                preferenceChanges[preferenceName] = { preferenceName: preferenceName, oldValue: oldValue };
                this.preferences[preferenceName] = undefined;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (deleted_1_1 && !deleted_1_1.done && (_b = deleted_1.return)) _b.call(deleted_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        // tslint:disable-next-line:forin
        for (var preferenceName in preferenceChanges) {
            this.onPreferenceChangedEmitter.fire(preferenceChanges[preferenceName]);
        }
    };
    PreferenceServiceImpl.prototype.getPreferences = function () {
        return this.preferences;
    };
    PreferenceServiceImpl.prototype.has = function (preferenceName) {
        return this.preferences[preferenceName] !== undefined;
    };
    PreferenceServiceImpl.prototype.get = function (preferenceName, defaultValue) {
        var value = this.preferences[preferenceName];
        return value !== null && value !== undefined ? value : defaultValue;
    };
    PreferenceServiceImpl.prototype.set = function (preferenceName, value, scope) {
        if (scope === void 0) { scope = PreferenceScope.User; }
        return this.getPreferenceProvider(scope).setPreference(preferenceName, value);
    };
    PreferenceServiceImpl.prototype.getBoolean = function (preferenceName, defaultValue) {
        var value = this.preferences[preferenceName];
        return value !== null && value !== undefined ? !!value : defaultValue;
    };
    PreferenceServiceImpl.prototype.getString = function (preferenceName, defaultValue) {
        var value = this.preferences[preferenceName];
        if (value === null || value === undefined) {
            return defaultValue;
        }
        if (typeof value === "string") {
            return value;
        }
        return value.toString();
    };
    PreferenceServiceImpl.prototype.getNumber = function (preferenceName, defaultValue) {
        var value = this.preferences[preferenceName];
        if (value === null || value === undefined) {
            return defaultValue;
        }
        if (typeof value === "number") {
            return value;
        }
        return Number(value);
    };
    __decorate([
        inversify_1.inject(exports.PreferenceProviders),
        __metadata("design:type", Function)
    ], PreferenceServiceImpl.prototype, "getPreferenceProvider", void 0);
    PreferenceServiceImpl = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [])
    ], PreferenceServiceImpl);
    return PreferenceServiceImpl;
}());
exports.PreferenceServiceImpl = PreferenceServiceImpl;
//# sourceMappingURL=preference-service.js.map