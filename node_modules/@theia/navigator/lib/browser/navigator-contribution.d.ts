/********************************************************************************
 * Copyright (C) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { AbstractViewContribution } from '@theia/core/lib/browser/shell/view-contribution';
import { CommandRegistry, MenuModelRegistry, MenuPath } from "@theia/core/lib/common";
import { Widget, KeybindingRegistry, OpenerService, FrontendApplicationContribution, FrontendApplication } from "@theia/core/lib/browser";
import { FileNavigatorWidget } from './navigator-widget';
import { FileNavigatorPreferences } from "./navigator-preferences";
import { FileNavigatorFilter } from "./navigator-filter";
export declare namespace FileNavigatorCommands {
    const REVEAL_IN_NAVIGATOR: {
        id: string;
        label: string;
    };
    const TOGGLE_HIDDEN_FILES: {
        id: string;
        label: string;
    };
}
export declare const NAVIGATOR_CONTEXT_MENU: MenuPath;
export declare namespace NavigatorContextMenu {
    const OPEN: string[];
    const OPEN_WITH: string[];
    const CLIPBOARD: string[];
    const MOVE: string[];
    const NEW: string[];
    const DIFF: string[];
}
export declare class FileNavigatorContribution extends AbstractViewContribution<FileNavigatorWidget> implements FrontendApplicationContribution {
    protected readonly fileNavigatorPreferences: FileNavigatorPreferences;
    protected readonly openerService: OpenerService;
    protected readonly fileNavigatorFilter: FileNavigatorFilter;
    constructor(fileNavigatorPreferences: FileNavigatorPreferences, openerService: OpenerService, fileNavigatorFilter: FileNavigatorFilter);
    protected init(): Promise<void>;
    initializeLayout(app: FrontendApplication): Promise<void>;
    registerCommands(registry: CommandRegistry): void;
    registerMenus(registry: MenuModelRegistry): void;
    registerKeybindings(registry: KeybindingRegistry): void;
    /**
     * Reveals and selects node in the file navigator to which given widget is related.
     * Does nothing if given widget undefined or doesn't have related resource.
     *
     * @param widget widget file resource of which should be revealed and selected
     */
    selectWidgetFileNode(widget: Widget | undefined): Promise<void>;
    protected onCurrentWidgetChangedHandler(): void;
}
//# sourceMappingURL=navigator-contribution.d.ts.map