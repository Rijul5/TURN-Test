/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Disposable, DisposableCollection } from '@theia/core/lib/common/disposable';
import { Event, Emitter } from '@theia/core/lib/common/event';
import { Tree, TreeNode } from '@theia/core/lib/browser/tree/tree';
import { TreeDecorator, TreeDecoration } from '@theia/core/lib/browser/tree/tree-decorator';
import { FuzzySearch } from './fuzzy-search';
export declare class FileNavigatorSearch implements Disposable, TreeDecorator {
    readonly id: string;
    protected readonly tree: Tree;
    protected readonly fuzzySearch: FuzzySearch;
    protected readonly disposables: DisposableCollection;
    protected readonly decorationEmitter: Emitter<(tree: Tree) => Map<string, TreeDecoration.Data>>;
    protected readonly filteredNodesEmitter: Emitter<ReadonlyArray<Readonly<TreeNode>>>;
    protected _filterResult: FuzzySearch.Match<TreeNode>[];
    protected _filteredNodes: ReadonlyArray<Readonly<TreeNode>>;
    init(): void;
    decorations(): Promise<Map<string, TreeDecoration.Data>>;
    /**
     * Resolves to all the visible tree nodes that match the search pattern.
     */
    filter(pattern: string | undefined): Promise<ReadonlyArray<Readonly<TreeNode>>>;
    readonly onDidChangeDecorations: Event<(tree: Tree) => Map<string, TreeDecoration.Data>>;
    /**
     * Returns with the filtered nodes after invoking the `filter` method.
     */
    readonly filteredNodes: ReadonlyArray<Readonly<TreeNode>>;
    /**
     * Event that is fired when the filtered nodes have been changed.
     */
    readonly onFilteredNodesChanged: Event<ReadonlyArray<Readonly<TreeNode>>>;
    dispose(): void;
    protected fireDidChangeDecorations(event: (tree: Tree) => Map<string, TreeDecoration.Data>): void;
    protected fireFilteredNodesChanged(nodes: ReadonlyArray<Readonly<TreeNode>>): void;
    protected toDecorator(match: FuzzySearch.Match<TreeNode>): TreeDecoration.Data;
    protected mapRange(range: FuzzySearch.Range): TreeDecoration.CaptionHighlight.Range;
}
//# sourceMappingURL=navigator-search.d.ts.map