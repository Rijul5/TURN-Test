/********************************************************************************
 * Copyright (C) 2017 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { ProcessManager } from './process-manager';
import { ILogger, Emitter, Event } from '@theia/core/lib/common';
export interface IProcessExitEvent {
    readonly code: number;
    readonly signal?: string;
}
export declare enum ProcessType {
    'Raw' = 0,
    'Terminal' = 1
}
export interface ProcessOptions {
    readonly command: string;
    args?: string[];
    options?: object;
}
export declare abstract class Process {
    protected readonly processManager: ProcessManager;
    protected readonly logger: ILogger;
    protected readonly type: ProcessType;
    protected readonly options: ProcessOptions;
    readonly id: number;
    readonly exitEmitter: Emitter<IProcessExitEvent>;
    readonly errorEmitter: Emitter<Error>;
    abstract readonly pid: number;
    protected _killed: boolean;
    constructor(processManager: ProcessManager, logger: ILogger, type: ProcessType, options: ProcessOptions);
    abstract kill(signal?: string): void;
    readonly killed: boolean;
    readonly onExit: Event<IProcessExitEvent>;
    readonly onError: Event<Error>;
    protected emitOnExit(code: number, signal?: string): void;
    protected handleOnExit(event: IProcessExitEvent): void;
    protected emitOnError(err: Error): void;
    protected handleOnError(error: Error): void;
}
//# sourceMappingURL=process.d.ts.map