"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var variable_1 = require("./variable");
/**
 * The variable resolver service should be used to resolve variables in strings.
 */
var VariableResolverService = /** @class */ (function () {
    function VariableResolverService(variableRegistry) {
        this.variableRegistry = variableRegistry;
    }
    VariableResolverService_1 = VariableResolverService;
    /**
     * Resolve the variables in the given string.
     * @returns promise resolved to the provided string with already resolved variables.
     * Never reject.
     */
    VariableResolverService.prototype.resolve = function (text) {
        return __awaiter(this, void 0, void 0, function () {
            var variablesToValues, resolvedText;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolveVariables(this.searchVariables(text))];
                    case 1:
                        variablesToValues = _a.sent();
                        resolvedText = text.replace(VariableResolverService_1.VAR_REGEXP, function (match, varName) {
                            var value = variablesToValues.get(varName);
                            return value ? value : match;
                        });
                        return [2 /*return*/, resolvedText];
                }
            });
        });
    };
    /**
     * Resolve the variables in the given string array.
     * @returns promise resolved to the provided string array with already resolved variables.
     * Never reject.
     */
    VariableResolverService.prototype.resolveArray = function (arr) {
        return __awaiter(this, void 0, void 0, function () {
            var result, i, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        result = [];
                        i = 0;
                        _c.label = 1;
                    case 1:
                        if (!(i < arr.length)) return [3 /*break*/, 4];
                        _a = result;
                        _b = i;
                        return [4 /*yield*/, this.resolve(arr[i])];
                    case 2:
                        _a[_b] = _c.sent();
                        _c.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, result];
                }
            });
        });
    };
    /**
     * Finds all variables in the given string.
     */
    VariableResolverService.prototype.searchVariables = function (text) {
        var variables = [];
        var match;
        while ((match = VariableResolverService_1.VAR_REGEXP.exec(text)) !== null) {
            var variableName = match[1];
            var variable = this.variableRegistry.getVariable(variableName);
            if (variable) {
                variables.push(variable);
            }
        }
        return variables;
    };
    /**
     * Resolve the given variables.
     * @returns promise resolved to the map of the variable name to its value.
     * Never reject.
     */
    VariableResolverService.prototype.resolveVariables = function (variables) {
        return __awaiter(this, void 0, void 0, function () {
            var resolvedVariables, promises;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resolvedVariables = new Map();
                        promises = [];
                        variables.forEach(function (variable) {
                            var promise = Promise.resolve(variable.resolve()).then(function (value) {
                                if (value) {
                                    resolvedVariables.set(variable.name, value);
                                }
                            });
                            promises.push(promise);
                        });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, resolvedVariables];
                }
            });
        });
    };
    var VariableResolverService_1;
    VariableResolverService.VAR_REGEXP = /\$\{(.*?)\}/g;
    VariableResolverService = VariableResolverService_1 = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(variable_1.VariableRegistry)),
        __metadata("design:paramtypes", [variable_1.VariableRegistry])
    ], VariableResolverService);
    return VariableResolverService;
}());
exports.VariableResolverService = VariableResolverService;
//# sourceMappingURL=variable-resolver-service.js.map