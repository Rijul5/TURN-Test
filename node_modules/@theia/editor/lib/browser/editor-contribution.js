"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var editor_manager_1 = require("./editor-manager");
var inversify_1 = require("inversify");
var status_bar_1 = require("@theia/core/lib/browser/status-bar/status-bar");
var common_1 = require("@theia/languages/lib/common");
var core_1 = require("@theia/core");
var EditorContribution = /** @class */ (function () {
    function EditorContribution() {
        this.toDisposeOnCurrentEditorChanged = new core_1.DisposableCollection();
    }
    EditorContribution.prototype.onStart = function () {
        var _this = this;
        this.updateStatusBar();
        this.editorManager.onCurrentEditorChanged(function () { return _this.updateStatusBar(); });
    };
    EditorContribution.prototype.updateStatusBar = function () {
        var _this = this;
        this.toDisposeOnCurrentEditorChanged.dispose();
        var widget = this.editorManager.currentEditor;
        if (widget) {
            var languageId_1 = widget.editor.document.languageId;
            var languages = this.languages.languages || [];
            var language = languages.find(function (l) { return l.id === languageId_1; });
            var languageName = language ? language.name : '';
            this.statusBar.setElement('editor-status-language', {
                text: languageName,
                alignment: status_bar_1.StatusBarAlignment.RIGHT,
                priority: 1
            });
            this.setCursorPositionStatus(widget.editor.cursor, widget.editor);
            this.toDisposeOnCurrentEditorChanged.push(widget.editor.onCursorPositionChanged(function (position) {
                return _this.setCursorPositionStatus(position, widget.editor);
            }));
        }
        else {
            this.statusBar.removeElement('editor-status-language');
            this.statusBar.removeElement('editor-status-cursor-position');
        }
    };
    EditorContribution.prototype.setCursorPositionStatus = function (position, editor) {
        this.statusBar.setElement('editor-status-cursor-position', {
            text: "Ln " + (position.line + 1) + ", Col " + editor.getVisibleColumn(position),
            alignment: status_bar_1.StatusBarAlignment.RIGHT,
            priority: 100
        });
    };
    __decorate([
        inversify_1.inject(status_bar_1.StatusBar),
        __metadata("design:type", Object)
    ], EditorContribution.prototype, "statusBar", void 0);
    __decorate([
        inversify_1.inject(editor_manager_1.EditorManager),
        __metadata("design:type", editor_manager_1.EditorManager)
    ], EditorContribution.prototype, "editorManager", void 0);
    __decorate([
        inversify_1.inject(common_1.Languages),
        __metadata("design:type", Object)
    ], EditorContribution.prototype, "languages", void 0);
    EditorContribution = __decorate([
        inversify_1.injectable()
    ], EditorContribution);
    return EditorContribution;
}());
exports.EditorContribution = EditorContribution;
//# sourceMappingURL=editor-contribution.js.map