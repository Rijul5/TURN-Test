/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Disposable, DisposableCollection, Emitter, Event } from '@theia/core/lib/common';
import URI from '@theia/core/lib/common/uri';
import { DidFilesChangedParams, FileChangeType, FileSystemWatcherServer, WatchOptions } from '../common/filesystem-watcher-protocol';
import { FileSystemPreferences } from "./filesystem-preferences";
export { FileChangeType };
export interface FileChange {
    uri: URI;
    type: FileChangeType;
}
export declare class FileSystemWatcher implements Disposable {
    protected readonly toDispose: DisposableCollection;
    protected readonly toRestartAll: DisposableCollection;
    protected readonly onFileChangedEmitter: Emitter<FileChange[]>;
    protected readonly server: FileSystemWatcherServer;
    protected readonly preferences: FileSystemPreferences;
    protected init(): void;
    /**
     * Stop watching.
     */
    dispose(): void;
    protected onDidFilesChanged(event: DidFilesChangedParams): void;
    /**
     * Start file watching under the given uri.
     *
     * Resolve when watching is started.
     * Return a disposable to stop file watching under the given uri.
     */
    watchFileChanges(uri: URI): Promise<Disposable>;
    /**
     * Emit when files under watched uris are changed.
     */
    readonly onFilesChanged: Event<FileChange[]>;
    protected createWatchOptions(): Promise<WatchOptions>;
    protected getIgnored(): Promise<string[]>;
}
//# sourceMappingURL=filesystem-watcher.d.ts.map