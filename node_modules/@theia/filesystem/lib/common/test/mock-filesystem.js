"use strict";
/********************************************************************************
 * Copyright (C) 2017 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var mockFileStat = {
    uri: '',
    lastModification: 0,
    isDirectory: true,
};
var MockFilesystem = /** @class */ (function () {
    function MockFilesystem() {
    }
    MockFilesystem.prototype.dispose = function () { };
    MockFilesystem.prototype.getFileStat = function (uri) {
        return Promise.resolve(mockFileStat);
    };
    MockFilesystem.prototype.exists = function (uri) {
        return Promise.resolve(true);
    };
    MockFilesystem.prototype.resolveContent = function (uri, options) {
        return Promise.resolve({ stat: mockFileStat, content: '' });
    };
    MockFilesystem.prototype.setContent = function (file, content, options) {
        return Promise.resolve(mockFileStat);
    };
    MockFilesystem.prototype.updateContent = function () {
        return Promise.resolve(mockFileStat);
    };
    MockFilesystem.prototype.move = function (sourceUri, targetUri, options) {
        return Promise.resolve(mockFileStat);
    };
    MockFilesystem.prototype.copy = function (sourceUri, targetUri, options) {
        return Promise.resolve(mockFileStat);
    };
    MockFilesystem.prototype.createFile = function (uri, options) {
        return Promise.resolve(mockFileStat);
    };
    MockFilesystem.prototype.createFolder = function (uri) {
        return Promise.resolve(mockFileStat);
    };
    MockFilesystem.prototype.touchFile = function (uri) {
        return Promise.resolve(mockFileStat);
    };
    MockFilesystem.prototype.delete = function (uri, options) {
        return Promise.resolve();
    };
    MockFilesystem.prototype.getEncoding = function (uri) {
        return Promise.resolve('');
    };
    MockFilesystem.prototype.getRoots = function () {
        return Promise.resolve([mockFileStat]);
    };
    MockFilesystem.prototype.getCurrentUserHome = function () {
        return Promise.resolve(mockFileStat);
    };
    MockFilesystem.prototype.setClient = function (client) {
    };
    MockFilesystem = __decorate([
        inversify_1.injectable()
    ], MockFilesystem);
    return MockFilesystem;
}());
exports.MockFilesystem = MockFilesystem;
//# sourceMappingURL=mock-filesystem.js.map