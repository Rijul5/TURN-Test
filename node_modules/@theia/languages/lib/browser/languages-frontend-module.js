"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var common_1 = require("@theia/core/lib/common");
var browser_1 = require("@theia/core/lib/browser");
var common_2 = require("../common");
var language_client_factory_1 = require("./language-client-factory");
var languages_frontend_contribution_1 = require("./languages-frontend-contribution");
var language_client_contribution_1 = require("./language-client-contribution");
var workspace_symbols_1 = require("./workspace-symbols");
var language_client_provider_1 = require("./language-client-provider");
var language_client_provider_impl_1 = require("./language-client-provider-impl");
exports.default = new inversify_1.ContainerModule(function (bind) {
    bind(common_2.Window).to(common_2.WindowImpl).inSingletonScope();
    bind(language_client_factory_1.LanguageClientFactory).toSelf().inSingletonScope();
    common_1.bindContributionProvider(bind, language_client_contribution_1.LanguageClientContribution);
    bind(browser_1.FrontendApplicationContribution).to(languages_frontend_contribution_1.LanguagesFrontendContribution);
    bind(workspace_symbols_1.WorkspaceSymbolCommand).toSelf().inSingletonScope();
    bind(common_1.CommandContribution).toDynamicValue(function (ctx) { return ctx.container.get(workspace_symbols_1.WorkspaceSymbolCommand); });
    bind(browser_1.KeybindingContribution).toDynamicValue(function (ctx) { return ctx.container.get(workspace_symbols_1.WorkspaceSymbolCommand); });
    bind(language_client_provider_impl_1.LanguageClientProviderImpl).toSelf().inSingletonScope();
    bind(language_client_provider_1.LanguageClientProvider).toDynamicValue(function (ctx) { return ctx.container.get(language_client_provider_impl_1.LanguageClientProviderImpl); }).inSingletonScope();
});
//# sourceMappingURL=languages-frontend-module.js.map