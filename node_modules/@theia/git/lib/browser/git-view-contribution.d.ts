import URI from '@theia/core/lib/common/uri';
import { DisposableCollection, CommandRegistry, MenuModelRegistry } from '@theia/core';
import { AbstractViewContribution, StatusBar, StatusBarEntry, FrontendApplicationContribution, FrontendApplication } from '@theia/core/lib/browser';
import { EditorManager, EditorWidget, EditorOpenerOptions } from '@theia/editor/lib/browser';
import { GitFileChange } from '../common';
import { GitWidget } from './git-widget';
import { GitRepositoryTracker } from './git-repository-tracker';
import { GitQuickOpenService } from './git-quick-open-service';
import { GitSyncService } from './git-sync-service';
export declare const GIT_WIDGET_FACTORY_ID = "git";
export declare const EDITOR_CONTEXT_MENU_GIT: string[];
export declare namespace GIT_COMMANDS {
    const FETCH: {
        id: string;
        label: string;
    };
    const PULL: {
        id: string;
        label: string;
    };
    const PUSH: {
        id: string;
        label: string;
    };
    const MERGE: {
        id: string;
        label: string;
    };
    const CHECKOUT: {
        id: string;
        label: string;
    };
    const COMMIT_AMEND: {
        id: string;
    };
    const COMMIT_SIGN_OFF: {
        id: string;
    };
    const CHANGE_REPOSITORY: {
        id: string;
        label: string;
    };
    const OPEN_FILE: {
        id: string;
        label: string;
    };
    const OPEN_CHANGES: {
        id: string;
        label: string;
    };
    const SYNC: {
        id: string;
        label: string;
    };
    const PUBLISH: {
        id: string;
        label: string;
    };
}
export declare class GitViewContribution extends AbstractViewContribution<GitWidget> implements FrontendApplicationContribution {
    static GIT_SELECTED_REPOSITORY: string;
    static GIT_REPOSITORY_STATUS: string;
    static GIT_SYNC_STATUS: string;
    protected toDispose: DisposableCollection;
    protected readonly statusBar: StatusBar;
    protected readonly editorManager: EditorManager;
    protected readonly quickOpenService: GitQuickOpenService;
    protected readonly repositoryTracker: GitRepositoryTracker;
    protected readonly syncService: GitSyncService;
    constructor();
    initializeLayout(app: FrontendApplication): Promise<void>;
    onStart(): void;
    registerMenus(menus: MenuModelRegistry): void;
    registerCommands(registry: CommandRegistry): void;
    protected hasConflicts(changes: GitFileChange[]): boolean;
    protected allStaged(changes: GitFileChange[]): boolean;
    protected openFile(): Promise<EditorWidget | undefined>;
    protected readonly openFileOptions: {
        uri: URI;
        options?: EditorOpenerOptions;
    } | undefined;
    openChanges(): Promise<EditorWidget | undefined>;
    protected readonly openChangesOptions: {
        change: GitFileChange;
        options?: EditorOpenerOptions;
    } | undefined;
    protected hasMultipleRepositories(): boolean;
    protected updateSyncStatusBarEntry(): void;
    protected getStatusBarEntry(): (Pick<StatusBarEntry, 'text'> & Partial<StatusBarEntry>) | undefined;
}
//# sourceMappingURL=git-view-contribution.d.ts.map