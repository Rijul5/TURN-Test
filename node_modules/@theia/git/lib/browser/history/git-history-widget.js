"use strict";
/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var diff_uris_1 = require("@theia/core/lib/browser/diff-uris");
var browser_1 = require("@theia/core/lib/browser");
var git_resource_1 = require("../git-resource");
var uri_1 = require("@theia/core/lib/common/uri");
var git_history_contribution_1 = require("./git-history-contribution");
var common_1 = require("../../common");
var common_2 = require("@theia/filesystem/lib/common");
var git_diff_contribution_1 = require("../diff/git-diff-contribution");
var git_avatar_service_1 = require("./git-avatar-service");
var git_commit_detail_open_handler_1 = require("./git-commit-detail-open-handler");
var git_navigable_list_widget_1 = require("../git-navigable-list-widget");
var git_widget_1 = require("../git-widget");
var vscode_jsonrpc_1 = require("vscode-jsonrpc");
var React = require("react");
var GitCommitNode;
(function (GitCommitNode) {
    function is(node) {
        return 'commitSha' in node && 'commitMessage' in node && 'fileChangeNodes' in node;
    }
    GitCommitNode.is = is;
})(GitCommitNode = exports.GitCommitNode || (exports.GitCommitNode = {}));
var GitHistoryWidget = /** @class */ (function (_super) {
    __extends(GitHistoryWidget, _super);
    function GitHistoryWidget(openerService, detailOpenHandler, shell, fileSystem, git, avartarService, widgetManager, diffContribution) {
        var _this = _super.call(this) || this;
        _this.openerService = openerService;
        _this.detailOpenHandler = detailOpenHandler;
        _this.shell = shell;
        _this.fileSystem = fileSystem;
        _this.git = git;
        _this.avartarService = avartarService;
        _this.widgetManager = widgetManager;
        _this.diffContribution = diffContribution;
        _this.id = git_history_contribution_1.GIT_HISTORY;
        _this.scrollContainer = 'git-history-list-container';
        _this.title.label = "Git History";
        _this.addClass('theia-git');
        return _this;
    }
    GitHistoryWidget.prototype.onAfterAttach = function (msg) {
        var _this = this;
        _super.prototype.onAfterAttach.call(this, msg);
        (function () { return __awaiter(_this, void 0, void 0, function () {
            var sc, listener;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getScrollContainer()];
                    case 1:
                        sc = _a.sent();
                        listener = function (e) {
                            var el = (e.srcElement || e.target);
                            if (el.scrollTop + el.clientHeight > el.scrollHeight - 83) {
                                var ll = _this.node.getElementsByClassName('history-lazy-loading')[0];
                                ll.className = "history-lazy-loading show";
                                _this.addCommits({
                                    range: {
                                        toRevision: _this.commits[_this.commits.length - 1].commitSha
                                    },
                                    maxCount: git_history_contribution_1.GIT_HISTORY_MAX_COUNT
                                });
                            }
                        };
                        sc.addEventListener("scroll", listener);
                        this.toDispose.push(vscode_jsonrpc_1.Disposable.create(function () {
                            sc.removeEventListener("scroll", listener);
                        }));
                        return [2 /*return*/];
                }
            });
        }); })();
    };
    GitHistoryWidget.prototype.setContent = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var fileStat;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.options = options || {};
                        this.ready = false;
                        if (!(options && options.uri)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.fileSystem.getFileStat(options.uri)];
                    case 1:
                        fileStat = _a.sent();
                        this.singleFileMode = !!fileStat && !fileStat.isDirectory;
                        _a.label = 2;
                    case 2:
                        this.addCommits(options);
                        this.update();
                        return [2 /*return*/];
                }
            });
        });
    };
    GitHistoryWidget.prototype.addCommits = function (options) {
        var _this = this;
        var repository = this.repositoryProvider.selectedRepository;
        if (repository) {
            var log = this.git.log(repository, options);
            log.then(function (changes) { return __awaiter(_this, void 0, void 0, function () {
                var e_1, _a, _b, commits, changes_1, changes_1_1, commit, fileChangeNodes, avatarUrl, e_1_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.commits = [];
                            if (this.commits.length > 0) {
                                changes = changes.slice(1);
                            }
                            if (!(changes.length > 0)) return [3 /*break*/, 9];
                            commits = [];
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 6, 7, 8]);
                            changes_1 = __values(changes), changes_1_1 = changes_1.next();
                            _c.label = 2;
                        case 2:
                            if (!!changes_1_1.done) return [3 /*break*/, 5];
                            commit = changes_1_1.value;
                            fileChangeNodes = [];
                            return [4 /*yield*/, this.avartarService.getAvatar(commit.author.email)];
                        case 3:
                            avatarUrl = _c.sent();
                            commits.push({
                                authorName: commit.author.name,
                                authorDate: new Date(commit.author.timestamp),
                                authorEmail: commit.author.email,
                                authorDateRelative: commit.authorDateRelative,
                                authorAvatar: avatarUrl,
                                commitSha: commit.sha,
                                commitMessage: commit.summary,
                                messageBody: commit.body,
                                fileChangeNodes: fileChangeNodes,
                                fileChanges: commit.fileChanges,
                                expanded: false,
                                selected: false
                            });
                            _c.label = 4;
                        case 4:
                            changes_1_1 = changes_1.next();
                            return [3 /*break*/, 2];
                        case 5: return [3 /*break*/, 8];
                        case 6:
                            e_1_1 = _c.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 8];
                        case 7:
                            try {
                                if (changes_1_1 && !changes_1_1.done && (_a = changes_1.return)) _a.call(changes_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 8:
                            (_b = this.commits).push.apply(_b, __spread(commits));
                            _c.label = 9;
                        case 9:
                            this.onDataReady();
                            return [2 /*return*/];
                    }
                });
            }); });
        }
        else {
            this.commits = [];
            this.onDataReady();
        }
    };
    GitHistoryWidget.prototype.addFileChangeNodesToCommit = function (commit) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!commit.fileChanges) return [3 /*break*/, 2];
                        return [4 /*yield*/, Promise.all(commit.fileChanges.map(function (fileChange) { return __awaiter(_this, void 0, void 0, function () {
                                var fileChangeUri, icon, label, description, caption;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            fileChangeUri = new uri_1.default(fileChange.uri);
                                            return [4 /*yield*/, this.labelProvider.getIcon(fileChangeUri)];
                                        case 1:
                                            icon = _a.sent();
                                            label = this.labelProvider.getName(fileChangeUri);
                                            description = this.relativePath(fileChangeUri.parent);
                                            caption = this.computeCaption(fileChange);
                                            commit.fileChangeNodes.push(__assign({}, fileChange, { icon: icon, label: label, description: description, caption: caption, commitSha: commit.commitSha }));
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        delete commit.fileChanges;
                        this.update();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    GitHistoryWidget.prototype.storeState = function () {
        var _a = this, commits = _a.commits, options = _a.options, singleFileMode = _a.singleFileMode;
        return {
            commits: commits,
            options: options,
            singleFileMode: singleFileMode
        };
    };
    // tslint:disable-next-line:no-any
    GitHistoryWidget.prototype.restoreState = function (oldState) {
        this.commits = oldState['commits'];
        this.options = oldState['options'];
        this.singleFileMode = oldState['singleFileMode'];
        this.ready = true;
        this.update();
    };
    GitHistoryWidget.prototype.onDataReady = function () {
        this.ready = true;
        this.update();
        var ll = this.node.getElementsByClassName('history-lazy-loading')[0];
        if (ll && ll.className === "history-lazy-loading show") {
            ll.className = "history-lazy-loading hide";
        }
    };
    GitHistoryWidget.prototype.render = function () {
        this.gitNodes = [];
        return React.createElement("div", { className: "git-diff-container" }, this.ready ?
            React.createElement(React.Fragment, null,
                this.renderHistoryHeader(),
                this.renderCommitList(),
                React.createElement("div", { className: 'history-lazy-loading' },
                    React.createElement("span", { className: "fa fa-spinner fa-pulse fa-2x fa-fw" })))
            :
                React.createElement("div", { className: 'spinnerContainer' },
                    React.createElement("span", { className: 'fa fa-spinner fa-pulse fa-3x fa-fw' })));
    };
    GitHistoryWidget.prototype.renderHistoryHeader = function () {
        if (this.options.uri) {
            var path = this.relativePath(this.options.uri);
            return React.createElement("div", { className: "diff-header" },
                path.length > 0 ?
                    React.createElement("div", { className: 'header-row' },
                        React.createElement("div", { className: 'theia-header' }, "path:"),
                        React.createElement("div", { className: 'header-value' }, '/' + path))
                    : '',
                React.createElement("div", { className: 'theia-header' }, "Commits"));
        }
    };
    GitHistoryWidget.prototype.renderCommitList = function () {
        var e_2, _a;
        var theList = [];
        try {
            for (var _b = __values(this.commits), _c = _b.next(); !_c.done; _c = _b.next()) {
                var commit = _c.value;
                var head = this.renderCommit(commit);
                var body = commit.expanded ? this.renderFileChangeList(commit) : "";
                theList.push(React.createElement("div", { key: commit.commitSha, className: "commitListElement" },
                    head,
                    body));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var commitList = React.createElement("div", { className: "commitList" }, theList);
        return React.createElement("div", { className: "listContainer", id: this.scrollContainer }, commitList);
    };
    GitHistoryWidget.prototype.renderCommit = function (commit) {
        var _this = this;
        this.gitNodes.push(commit);
        var expansionToggleIcon = "caret-right";
        if (commit && commit.expanded) {
            expansionToggleIcon = "caret-down";
        }
        return React.createElement("div", { className: "containerHead" + (commit.selected ? ' ' + browser_1.SELECTED_CLASS : ''), onClick: function () {
                if (commit.selected && !_this.singleFileMode) {
                    commit.expanded = !commit.expanded;
                    if (commit.expanded) {
                        _this.addFileChangeNodesToCommit(commit);
                    }
                    _this.update();
                }
                else {
                    _this.selectNode(commit);
                }
            }, onDoubleClick: function () {
                if (_this.singleFileMode) {
                    _this.openFile(commit.fileChangeNodes[0], commit.commitSha);
                }
            } },
            React.createElement("div", { className: "headContent" },
                React.createElement("div", { className: "image-container" },
                    React.createElement("img", { className: "gravatar", src: commit.authorAvatar })),
                React.createElement("div", { className: "headLabelContainer" + (this.singleFileMode ? ' singleFileMode' : '') },
                    React.createElement("div", { className: "headLabel noWrapInfo noselect" }, commit.commitMessage),
                    React.createElement("div", { className: "commitTime noWrapInfo noselect" }, commit.authorDateRelative + ' by ' + commit.authorName)),
                React.createElement("div", { className: "fa fa-eye detailButton", onClick: function () { return _this.openDetailWidget(commit); } }),
                !this.singleFileMode ? React.createElement("div", { className: "expansionToggle noselect" },
                    React.createElement("div", { className: "toggle" },
                        React.createElement("div", { className: "number" }, (commit.fileChanges && commit.fileChanges.length || commit.fileChangeNodes.length).toString()),
                        React.createElement("div", { className: "icon fa fa-" + expansionToggleIcon })))
                    : ''));
    };
    GitHistoryWidget.prototype.openDetailWidget = function (commit) {
        return __awaiter(this, void 0, void 0, function () {
            var commitDetails;
            return __generator(this, function (_a) {
                commitDetails = this.detailOpenHandler.getCommitDetailWidgetOptions(commit);
                this.detailOpenHandler.open(git_commit_detail_open_handler_1.GitCommitDetailUri.toUri(commit.commitSha), __assign({}, commitDetails));
                return [2 /*return*/];
            });
        });
    };
    GitHistoryWidget.prototype.renderFileChangeList = function (commit) {
        var _a, e_3, _b;
        var fileChanges = commit.fileChangeNodes;
        (_a = this.gitNodes).push.apply(_a, __spread(fileChanges));
        var files = [];
        try {
            for (var fileChanges_1 = __values(fileChanges), fileChanges_1_1 = fileChanges_1.next(); !fileChanges_1_1.done; fileChanges_1_1 = fileChanges_1.next()) {
                var fileChange = fileChanges_1_1.value;
                var fileChangeElement = this.renderGitItem(fileChange, commit.commitSha);
                files.push(fileChangeElement);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (fileChanges_1_1 && !fileChanges_1_1.done && (_b = fileChanges_1.return)) _b.call(fileChanges_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return React.createElement("div", { className: "commitBody" },
            React.createElement("div", { className: "commitFileList" }, files));
    };
    GitHistoryWidget.prototype.renderGitItem = function (change, commitSha) {
        var _this = this;
        return React.createElement("div", { key: change.uri.toString(), className: "gitItem noselect" + (change.selected ? ' ' + browser_1.SELECTED_CLASS : '') },
            React.createElement("div", { title: change.caption, className: 'noWrapInfo', onDoubleClick: function () {
                    _this.openFile(change, commitSha);
                }, onClick: function () {
                    _this.selectNode(change);
                } },
                React.createElement("span", { className: change.icon + ' file-icon' }),
                React.createElement("span", { className: 'name' }, change.label + ' '),
                React.createElement("span", { className: 'path' }, change.description)),
            change.extraIconClassName ? React.createElement("div", { title: change.caption, className: change.extraIconClassName })
                : '',
            React.createElement("div", { title: change.caption, className: 'status staged ' + common_1.GitFileStatus[change.status].toLowerCase() }, this.getStatusCaption(change.status, true).charAt(0)));
    };
    GitHistoryWidget.prototype.navigateLeft = function () {
        var selected = this.getSelected();
        if (selected) {
            var idx = this.commits.findIndex(function (c) { return c.commitSha === selected.commitSha; });
            if (GitCommitNode.is(selected)) {
                if (selected.expanded) {
                    selected.expanded = false;
                }
                else {
                    if (idx > 0) {
                        this.selectNode(this.commits[idx - 1]);
                    }
                }
            }
            else if (git_widget_1.GitFileChangeNode.is(selected)) {
                this.selectNode(this.commits[idx]);
            }
        }
        this.update();
    };
    GitHistoryWidget.prototype.navigateRight = function () {
        var selected = this.getSelected();
        if (selected) {
            if (GitCommitNode.is(selected) && !selected.expanded && !this.singleFileMode) {
                selected.expanded = true;
                this.addFileChangeNodesToCommit(selected);
            }
            else {
                this.selectNextNode();
            }
        }
        this.update();
    };
    GitHistoryWidget.prototype.handleListEnter = function () {
        var selected = this.getSelected();
        if (selected) {
            if (GitCommitNode.is(selected)) {
                if (this.singleFileMode) {
                    this.openFile(selected.fileChangeNodes[0], selected.commitSha);
                }
                else {
                    this.openDetailWidget(selected);
                }
            }
            else if (git_widget_1.GitFileChangeNode.is(selected)) {
                this.openFile(selected, selected.commitSha || "");
            }
        }
        this.update();
    };
    GitHistoryWidget.prototype.openFile = function (change, commitSha) {
        var uri = new uri_1.default(change.uri);
        var fromURI = change.oldUri ? new uri_1.default(change.oldUri) : uri; // set oldUri on renamed and copied
        fromURI = fromURI.withScheme(git_resource_1.GIT_RESOURCE_SCHEME).withQuery(commitSha + "~1");
        var toURI = uri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME).withQuery(commitSha);
        var uriToOpen = uri;
        if (change.status === common_1.GitFileStatus.Deleted) {
            uriToOpen = fromURI;
        }
        else if (change.status === common_1.GitFileStatus.New) {
            uriToOpen = toURI;
        }
        else {
            uriToOpen = diff_uris_1.DiffUris.encode(fromURI, toURI, uri.displayName);
        }
        browser_1.open(this.openerService, uriToOpen, { mode: 'reveal' });
    };
    GitHistoryWidget = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(browser_1.OpenerService)),
        __param(1, inversify_1.inject(git_commit_detail_open_handler_1.GitCommitDetailOpenHandler)),
        __param(2, inversify_1.inject(browser_1.ApplicationShell)),
        __param(3, inversify_1.inject(common_2.FileSystem)),
        __param(4, inversify_1.inject(common_1.Git)),
        __param(5, inversify_1.inject(git_avatar_service_1.GitAvatarService)),
        __param(6, inversify_1.inject(browser_1.WidgetManager)),
        __param(7, inversify_1.inject(git_diff_contribution_1.GitDiffContribution)),
        __metadata("design:paramtypes", [Object, git_commit_detail_open_handler_1.GitCommitDetailOpenHandler,
            browser_1.ApplicationShell, Object, Object, git_avatar_service_1.GitAvatarService,
            browser_1.WidgetManager,
            git_diff_contribution_1.GitDiffContribution])
    ], GitHistoryWidget);
    return GitHistoryWidget;
}(git_navigable_list_widget_1.GitNavigableListWidget));
exports.GitHistoryWidget = GitHistoryWidget;
//# sourceMappingURL=git-history-widget.js.map