"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var uri_1 = require("@theia/core/lib/common/uri");
var common_1 = require("@theia/filesystem/lib/common");
var browser_1 = require("@theia/filesystem/lib/browser");
var common_2 = require("../common");
var window_service_1 = require("@theia/core/lib/browser/window/window-service");
var promise_util_1 = require("@theia/core/lib/common/promise-util");
var logger_1 = require("@theia/core/lib/common/logger");
var workspace_preferences_1 = require("./workspace-preferences");
/**
 * The workspace service.
 */
var WorkspaceService = /** @class */ (function () {
    function WorkspaceService() {
        this.deferredRoot = new promise_util_1.Deferred();
        this.root = this.deferredRoot.promise;
    }
    WorkspaceService.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var rootUri, _a, uri;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.server.getRoot()];
                    case 1:
                        rootUri = _b.sent();
                        _a = this;
                        return [4 /*yield*/, this.toValidRoot(rootUri)];
                    case 2:
                        _a._root = _b.sent();
                        if (this._root) {
                            uri = new uri_1.default(this._root.uri);
                            this.updateTitle(uri);
                            this.watcher.watchFileChanges(uri);
                        }
                        this.deferredRoot.resolve(this._root);
                        return [2 /*return*/];
                }
            });
        });
    };
    WorkspaceService.prototype.updateTitle = function (uri) {
        document.title = uri.displayName;
    };
    /**
     * on unload, we set our workspace root as the last recently used on the backend.
     * @param app
     */
    WorkspaceService.prototype.onStop = function (app) {
        if (this._root) {
            this.server.setRoot(this._root.uri);
        }
    };
    Object.defineProperty(WorkspaceService.prototype, "opened", {
        /**
         * Returns `true` if current workspace root is set.
         * @returns {boolean}
         */
        get: function () {
            return !!this._root;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens the given URI as the current workspace root.
     */
    WorkspaceService.prototype.open = function (uri, options) {
        this.doOpen(uri, options);
    };
    WorkspaceService.prototype.doOpen = function (uri, options) {
        return __awaiter(this, void 0, void 0, function () {
            var rootUri, valid, preserveWindow, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        rootUri = uri.toString();
                        return [4 /*yield*/, this.toValidRoot(rootUri)];
                    case 1:
                        valid = _c.sent();
                        if (!valid) return [3 /*break*/, 5];
                        _a = {};
                        _b = this.preferences['workspace.preserveWindow'];
                        if (_b) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.root];
                    case 2:
                        _b = !(_c.sent());
                        _c.label = 3;
                    case 3:
                        preserveWindow = __assign.apply(void 0, [(_a.preserveWindow = _b, _a), options]).preserveWindow;
                        return [4 /*yield*/, this.server.setRoot(rootUri)];
                    case 4:
                        _c.sent();
                        if (preserveWindow) {
                            this._root = valid;
                        }
                        this.openWindow(uri, { preserveWindow: preserveWindow });
                        return [2 /*return*/];
                    case 5: throw new Error("Invalid workspace root URI. Expected an existing directory location. URI: " + rootUri + ".");
                }
            });
        });
    };
    /**
     * Clears current workspace root and reloads window.
     */
    WorkspaceService.prototype.close = function () {
        this.doClose();
    };
    WorkspaceService.prototype.doClose = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._root = undefined;
                        return [4 /*yield*/, this.server.setRoot('')];
                    case 1:
                        _a.sent();
                        this.reloadWindow();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * returns a FileStat if the argument URI points to an existing directory. Otherwise, `undefined`.
     */
    WorkspaceService.prototype.toValidRoot = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var fileStat, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!uri) {
                            return [2 /*return*/, undefined];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        if (uri && uri.endsWith("/")) {
                            uri = uri.slice(0, -1);
                        }
                        return [4 /*yield*/, this.fileSystem.getFileStat(uri)];
                    case 2:
                        fileStat = _a.sent();
                        if (!fileStat) {
                            return [2 /*return*/, undefined];
                        }
                        if (fileStat.isDirectory) {
                            return [2 /*return*/, fileStat];
                        }
                        return [2 /*return*/, undefined];
                    case 3:
                        error_1 = _a.sent();
                        return [2 /*return*/, undefined];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    WorkspaceService.prototype.openWindow = function (uri, options) {
        var _this = this;
        if (this.shouldPreserveWindow(options)) {
            this.reloadWindow();
        }
        else {
            try {
                this.openNewWindow();
            }
            catch (error) {
                // Fall back to reloading the current window in case the browser has blocked the new window
                this._root = undefined;
                this.logger.error(error.toString()).then(function () { return _this.reloadWindow(); });
            }
        }
    };
    WorkspaceService.prototype.reloadWindow = function () {
        window.location.reload(true);
    };
    WorkspaceService.prototype.openNewWindow = function () {
        this.windowService.openNewWindow(window.location.href);
    };
    WorkspaceService.prototype.shouldPreserveWindow = function (options) {
        return options !== undefined && !!options.preserveWindow;
    };
    /**
     * Return true if one of the paths in paths array is present in the workspace
     * NOTE: You should always explicitly use `/` as the separator between the path segments.
     */
    WorkspaceService.prototype.containsSome = function (paths) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, _a, workspaceRoot, uri, paths_1, paths_1_1, path, fileUri, exists, e_1_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.root];
                    case 1:
                        workspaceRoot = _b.sent();
                        if (!workspaceRoot) return [3 /*break*/, 9];
                        uri = new uri_1.default(workspaceRoot.uri);
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 7, 8, 9]);
                        paths_1 = __values(paths), paths_1_1 = paths_1.next();
                        _b.label = 3;
                    case 3:
                        if (!!paths_1_1.done) return [3 /*break*/, 6];
                        path = paths_1_1.value;
                        fileUri = uri.resolve(path).toString();
                        return [4 /*yield*/, this.fileSystem.exists(fileUri)];
                    case 4:
                        exists = _b.sent();
                        if (exists) {
                            return [2 /*return*/, exists];
                        }
                        _b.label = 5;
                    case 5:
                        paths_1_1 = paths_1.next();
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (paths_1_1 && !paths_1_1.done && (_a = paths_1.return)) _a.call(paths_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/, false];
                }
            });
        });
    };
    __decorate([
        inversify_1.inject(common_1.FileSystem),
        __metadata("design:type", Object)
    ], WorkspaceService.prototype, "fileSystem", void 0);
    __decorate([
        inversify_1.inject(browser_1.FileSystemWatcher),
        __metadata("design:type", browser_1.FileSystemWatcher)
    ], WorkspaceService.prototype, "watcher", void 0);
    __decorate([
        inversify_1.inject(common_2.WorkspaceServer),
        __metadata("design:type", Object)
    ], WorkspaceService.prototype, "server", void 0);
    __decorate([
        inversify_1.inject(window_service_1.WindowService),
        __metadata("design:type", Object)
    ], WorkspaceService.prototype, "windowService", void 0);
    __decorate([
        inversify_1.inject(logger_1.ILogger),
        __metadata("design:type", Object)
    ], WorkspaceService.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(workspace_preferences_1.WorkspacePreferences),
        __metadata("design:type", Object)
    ], WorkspaceService.prototype, "preferences", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], WorkspaceService.prototype, "init", null);
    WorkspaceService = __decorate([
        inversify_1.injectable()
    ], WorkspaceService);
    return WorkspaceService;
}());
exports.WorkspaceService = WorkspaceService;
//# sourceMappingURL=workspace-service.js.map