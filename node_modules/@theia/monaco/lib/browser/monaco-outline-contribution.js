"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var SymbolKind = monaco.modes.SymbolKind;
var browser_1 = require("@theia/editor/lib/browser");
var DocumentSymbolProviderRegistry = monaco.modes.DocumentSymbolProviderRegistry;
var CancellationTokenSource = monaco.cancellation.CancellationTokenSource;
var core_1 = require("@theia/core");
var outline_view_service_1 = require("@theia/outline-view/lib/browser/outline-view-service");
var outline_view_widget_1 = require("@theia/outline-view/lib/browser/outline-view-widget");
var uri_1 = require("@theia/core/lib/common/uri");
var monaco_editor_1 = require("./monaco-editor");
var debounce = require("lodash.debounce");
var MonacoOutlineContribution = /** @class */ (function () {
    function MonacoOutlineContribution() {
        this.toDisposeOnClose = new core_1.DisposableCollection();
        this.toDisposeOnEditor = new core_1.DisposableCollection();
    }
    MonacoOutlineContribution.prototype.onStart = function (app) {
        var _this = this;
        this.outlineViewService.onDidChangeOpenState(function (open) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (open) {
                    this.toDisposeOnClose.push(this.toDisposeOnEditor);
                    this.toDisposeOnClose.push(DocumentSymbolProviderRegistry.onDidChange(debounce(function () { return _this.updateOutline(); })));
                    this.toDisposeOnClose.push(this.editorManager.onCurrentEditorChanged(debounce(function () { return _this.handleCurrentEditorChanged(); }, 50)));
                    this.handleCurrentEditorChanged();
                }
                else {
                    this.toDisposeOnClose.dispose();
                }
                return [2 /*return*/];
            });
        }); });
        this.outlineViewService.onDidSelect(function (node) { return __awaiter(_this, void 0, void 0, function () {
            var uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(MonacoOutlineSymbolInformationNode.is(node) && node.parent)) return [3 /*break*/, 2];
                        uri = new uri_1.default(node.uri);
                        return [4 /*yield*/, this.editorManager.open(uri, {
                                mode: 'reveal',
                                selection: node.range
                            })];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); });
        this.outlineViewService.onDidOpen(function (node) {
            if (MonacoOutlineSymbolInformationNode.is(node)) {
                _this.editorManager.open(new uri_1.default(node.uri), {
                    selection: {
                        start: node.range.start
                    }
                });
            }
        });
    };
    MonacoOutlineContribution.prototype.handleCurrentEditorChanged = function () {
        var _this = this;
        this.toDisposeOnEditor.dispose();
        if (this.toDisposeOnClose.disposed) {
            return;
        }
        this.toDisposeOnClose.push(this.toDisposeOnEditor);
        var editor = this.editorManager.currentEditor;
        if (editor) {
            var model = monaco_editor_1.MonacoEditor.get(editor).getControl().getModel();
            this.toDisposeOnEditor.push(model.onDidChangeContent(function () { return _this.updateOutline(); }));
        }
        this.updateOutline();
    };
    MonacoOutlineContribution.prototype.updateOutline = function () {
        return __awaiter(this, void 0, void 0, function () {
            var editor, model, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        editor = this.editorManager.currentEditor;
                        if (!editor) return [3 /*break*/, 2];
                        model = monaco_editor_1.MonacoEditor.get(editor).getControl().getModel();
                        _a = this.publish;
                        return [4 /*yield*/, this.computeSymbolInformations(model)];
                    case 1:
                        _a.apply(this, [_b.sent()]);
                        return [3 /*break*/, 3];
                    case 2:
                        this.publish([]);
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    MonacoOutlineContribution.prototype.computeSymbolInformations = function (model) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, _a, entries, documentSymbolProviders, token, documentSymbolProviders_1, documentSymbolProviders_1_1, documentSymbolProvider, symbolInformation, _b, e_1_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        entries = [];
                        return [4 /*yield*/, DocumentSymbolProviderRegistry.all(model)];
                    case 1:
                        documentSymbolProviders = _c.sent();
                        if (this.cancellationSource) {
                            this.cancellationSource.cancel();
                        }
                        this.cancellationSource = new CancellationTokenSource();
                        token = this.cancellationSource.token;
                        _c.label = 2;
                    case 2:
                        _c.trys.push([2, 9, 10, 11]);
                        documentSymbolProviders_1 = __values(documentSymbolProviders), documentSymbolProviders_1_1 = documentSymbolProviders_1.next();
                        _c.label = 3;
                    case 3:
                        if (!!documentSymbolProviders_1_1.done) return [3 /*break*/, 8];
                        documentSymbolProvider = documentSymbolProviders_1_1.value;
                        _c.label = 4;
                    case 4:
                        _c.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, documentSymbolProvider.provideDocumentSymbols(model, token)];
                    case 5:
                        symbolInformation = _c.sent();
                        if (token.isCancellationRequested) {
                            return [2 /*return*/, []];
                        }
                        if (Array.isArray(symbolInformation)) {
                            entries.push.apply(entries, __spread(symbolInformation));
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        _b = _c.sent();
                        // happens if `provideDocumentSymbols` promise is rejected.
                        return [2 /*return*/, []];
                    case 7:
                        documentSymbolProviders_1_1 = documentSymbolProviders_1.next();
                        return [3 /*break*/, 3];
                    case 8: return [3 /*break*/, 11];
                    case 9:
                        e_1_1 = _c.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 11];
                    case 10:
                        try {
                            if (documentSymbolProviders_1_1 && !documentSymbolProviders_1_1.done && (_a = documentSymbolProviders_1.return)) _a.call(documentSymbolProviders_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 11: return [2 /*return*/, entries];
                }
            });
        });
    };
    MonacoOutlineContribution.prototype.publish = function (symbolInformations) {
        var _this = this;
        var e_2, _a, e_3, _b;
        var rangeBased = false;
        var ids = new Map();
        var nodesByName = symbolInformations.sort(this.orderByPosition).reduce(function (result, symbol) {
            rangeBased = rangeBased || symbol.location.range.startLineNumber !== symbol.location.range.endLineNumber;
            var values = result.get(symbol.name) || [];
            var node = _this.createNode(symbol, ids);
            values.push({ symbol: symbol, node: node });
            result.set(symbol.name, values);
            return result;
        }, new Map());
        var roots = [];
        try {
            for (var _c = __values(nodesByName.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var nodes = _d.value;
                var _loop_1 = function (node, symbol) {
                    if (!symbol.containerName) {
                        roots.push(node);
                    }
                    else {
                        var possibleParents = nodesByName.get(symbol.containerName);
                        if (possibleParents) {
                            var parent_1 = possibleParents.find(function (possibleParent) { return _this.parentContains(symbol, possibleParent.symbol, rangeBased); });
                            if (parent_1) {
                                var parentNode = parent_1.node;
                                Object.assign(node, { parent: parentNode });
                                parentNode.children.push(node);
                            }
                        }
                    }
                };
                try {
                    for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
                        var _e = nodes_1_1.value, node = _e.node, symbol = _e.symbol;
                        _loop_1(node, symbol);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (nodes_1_1 && !nodes_1_1.done && (_b = nodes_1.return)) _b.call(nodes_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (roots.length === 0) {
            var nodes = nodesByName.values().next().value;
            if (nodes && !nodes[0].node.parent) {
                this.outlineViewService.publish([nodes[0].node]);
            }
            else {
                this.outlineViewService.publish([]);
            }
        }
        else {
            this.outlineViewService.publish(roots);
        }
    };
    MonacoOutlineContribution.prototype.parentContains = function (symbol, parent, rangeBased) {
        var symbolRange = this.getRangeFromSymbolInformation(symbol);
        var nodeRange = this.getRangeFromSymbolInformation(parent);
        var sameStartLine = symbolRange.start.line === nodeRange.start.line;
        var startColGreaterOrEqual = symbolRange.start.character >= nodeRange.start.character;
        var startLineGreater = symbolRange.start.line > nodeRange.start.line;
        var sameEndLine = symbolRange.end.line === nodeRange.end.line;
        var endColSmallerOrEqual = symbolRange.end.character <= nodeRange.end.character;
        var endLineSmaller = symbolRange.end.line < nodeRange.end.line;
        return (((sameStartLine && startColGreaterOrEqual || startLineGreater) &&
            (sameEndLine && endColSmallerOrEqual || endLineSmaller)) || !rangeBased);
    };
    MonacoOutlineContribution.prototype.getRangeFromSymbolInformation = function (symbolInformation) {
        return {
            end: {
                character: symbolInformation.location.range.endColumn - 1,
                line: symbolInformation.location.range.endLineNumber - 1
            },
            start: {
                character: symbolInformation.location.range.startColumn - 1,
                line: symbolInformation.location.range.startLineNumber - 1
            }
        };
    };
    MonacoOutlineContribution.prototype.createNode = function (symbol, ids) {
        var id = this.createId(symbol.name, ids);
        return {
            children: [],
            id: id,
            iconClass: SymbolKind[symbol.kind].toString().toLowerCase(),
            name: symbol.name,
            parent: undefined,
            uri: symbol.location.uri.toString(),
            range: this.getRangeFromSymbolInformation(symbol),
            selected: false,
            expanded: this.shouldExpand(symbol)
        };
    };
    MonacoOutlineContribution.prototype.createId = function (name, ids) {
        var counter = ids.get(name);
        var index = typeof counter === 'number' ? counter + 1 : 0;
        ids.set(name, index);
        return name + '_' + index;
    };
    MonacoOutlineContribution.prototype.shouldExpand = function (symbol) {
        return [SymbolKind.Class,
            SymbolKind.Enum, SymbolKind.File,
            SymbolKind.Interface, SymbolKind.Module,
            SymbolKind.Namespace, SymbolKind.Object,
            SymbolKind.Package, SymbolKind.Struct].indexOf(symbol.kind) !== -1;
    };
    MonacoOutlineContribution.prototype.orderByPosition = function (symbol1, symbol2) {
        var startLineComparison = symbol1.location.range.startLineNumber - symbol2.location.range.startLineNumber;
        if (startLineComparison !== 0) {
            return startLineComparison;
        }
        var startOffsetComparison = symbol1.location.range.startColumn - symbol2.location.range.startColumn;
        if (startOffsetComparison !== 0) {
            return startOffsetComparison;
        }
        var endLineComparison = symbol1.location.range.endLineNumber - symbol2.location.range.endLineNumber;
        if (endLineComparison !== 0) {
            return endLineComparison;
        }
        return symbol1.location.range.endColumn - symbol2.location.range.endColumn;
    };
    __decorate([
        inversify_1.inject(outline_view_service_1.OutlineViewService),
        __metadata("design:type", outline_view_service_1.OutlineViewService)
    ], MonacoOutlineContribution.prototype, "outlineViewService", void 0);
    __decorate([
        inversify_1.inject(browser_1.EditorManager),
        __metadata("design:type", browser_1.EditorManager)
    ], MonacoOutlineContribution.prototype, "editorManager", void 0);
    MonacoOutlineContribution = __decorate([
        inversify_1.injectable()
    ], MonacoOutlineContribution);
    return MonacoOutlineContribution;
}());
exports.MonacoOutlineContribution = MonacoOutlineContribution;
var MonacoOutlineSymbolInformationNode;
(function (MonacoOutlineSymbolInformationNode) {
    function is(node) {
        return outline_view_widget_1.OutlineSymbolInformationNode.is(node) && 'uri' in node && 'range' in node;
    }
    MonacoOutlineSymbolInformationNode.is = is;
})(MonacoOutlineSymbolInformationNode = exports.MonacoOutlineSymbolInformationNode || (exports.MonacoOutlineSymbolInformationNode = {}));
//# sourceMappingURL=monaco-outline-contribution.js.map