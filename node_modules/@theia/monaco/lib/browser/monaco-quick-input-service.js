"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var inversify_1 = require("inversify");
var monaco_quick_open_service_1 = require("./monaco-quick-open-service");
var browser_1 = require("@theia/core/lib/browser");
var promptMessage = "Press 'Enter' to confirm your input or 'Escape' to cancel";
var QuickInputService = /** @class */ (function () {
    function QuickInputService() {
    }
    QuickInputService.prototype.open = function (options) {
        var _this = this;
        options.prompt = this.createPrompt(options.prompt);
        var inputItem = new InputOpenItemOptions(options.prompt);
        this.opts = new MonacoQuickInputControllerOptsImpl({
            onType: function (s, a) { return _this.validateInput(s, a, inputItem); }
        }, options, {
            prefix: options.value,
            placeholder: options.placeHolder,
            onClose: function () { return inputItem.resolve(undefined); }
        });
        this.quickOpenService.internalOpen(this.opts);
        return new Promise(function (r) {
            inputItem.resolve = r;
        });
    };
    QuickInputService.prototype.createPrompt = function (prompt) {
        if (prompt) {
            return prompt + " (" + promptMessage + ")";
        }
        else {
            return promptMessage;
        }
    };
    QuickInputService.prototype.validateInput = function (str, acceptor, inputItem) {
        var _this = this;
        inputItem.currentText = str;
        acceptor([new browser_1.QuickOpenItem(inputItem)]);
        if (this.opts && this.opts.validateInput) {
            var hint = this.opts.validateInput(str);
            if (hint) {
                if (typeof hint !== 'string') {
                    hint.then(function (p) {
                        if (p) {
                            _this.setValidationState(inputItem, p, false);
                        }
                        else {
                            _this.setValidationState(inputItem, _this.opts.prompt, true);
                        }
                    });
                }
                else {
                    this.setValidationState(inputItem, hint, false);
                }
            }
            else {
                this.setValidationState(inputItem, this.opts.prompt, true);
            }
        }
    };
    QuickInputService.prototype.setValidationState = function (inputItem, label, isValid) {
        this.quickOpenService.clearInputDecoration();
        inputItem.isValid = isValid;
        inputItem.label = label;
        if (isValid) {
            this.quickOpenService.clearInputDecoration();
        }
        else {
            this.quickOpenService.showInputDecoration(monaco.Severity.Error);
        }
    };
    __decorate([
        inversify_1.inject(monaco_quick_open_service_1.MonacoQuickOpenService),
        __metadata("design:type", monaco_quick_open_service_1.MonacoQuickOpenService)
    ], QuickInputService.prototype, "quickOpenService", void 0);
    QuickInputService = __decorate([
        inversify_1.injectable()
    ], QuickInputService);
    return QuickInputService;
}());
exports.QuickInputService = QuickInputService;
var InputOpenItemOptions = /** @class */ (function () {
    function InputOpenItemOptions(label) {
        this.label = label;
        this.isValid = true;
    }
    InputOpenItemOptions.prototype.run = function (mode) {
        if (this.isValid && mode === browser_1.QuickOpenMode.OPEN) {
            this.resolve(this.currentText);
            return true;
        }
        return false;
    };
    return InputOpenItemOptions;
}());
var MonacoQuickInputControllerOptsImpl = /** @class */ (function (_super) {
    __extends(MonacoQuickInputControllerOptsImpl, _super);
    function MonacoQuickInputControllerOptsImpl(model, inputOptions, options) {
        var _this = _super.call(this, model, options) || this;
        if (inputOptions.password) {
            _this.password = inputOptions.password;
        }
        if (inputOptions.prompt) {
            _this.prompt = inputOptions.prompt;
        }
        if (inputOptions.ignoreFocusOut) {
            _this.ignoreFocusOut = inputOptions.ignoreFocusOut;
        }
        if (inputOptions.validateInput) {
            _this.validateInput = inputOptions.validateInput;
        }
        return _this;
    }
    return MonacoQuickInputControllerOptsImpl;
}(monaco_quick_open_service_1.MonacoQuickOpenControllerOptsImpl));
//# sourceMappingURL=monaco-quick-input-service.js.map