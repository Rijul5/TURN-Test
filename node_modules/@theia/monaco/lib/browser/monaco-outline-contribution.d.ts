/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/// <reference types="monaco-editor-core/monaco" />
import SymbolInformation = monaco.modes.SymbolInformation;
import { FrontendApplicationContribution, FrontendApplication, TreeNode } from "@theia/core/lib/browser";
import { Range, EditorManager } from '@theia/editor/lib/browser';
import CancellationTokenSource = monaco.cancellation.CancellationTokenSource;
import { DisposableCollection } from "@theia/core";
import { OutlineViewService } from '@theia/outline-view/lib/browser/outline-view-service';
import { OutlineSymbolInformationNode } from '@theia/outline-view/lib/browser/outline-view-widget';
export declare class MonacoOutlineContribution implements FrontendApplicationContribution {
    protected cancellationSource: CancellationTokenSource;
    protected readonly toDisposeOnClose: DisposableCollection;
    protected readonly toDisposeOnEditor: DisposableCollection;
    protected readonly outlineViewService: OutlineViewService;
    protected readonly editorManager: EditorManager;
    onStart(app: FrontendApplication): void;
    protected handleCurrentEditorChanged(): void;
    protected updateOutline(): Promise<void>;
    protected computeSymbolInformations(model: monaco.editor.IModel): Promise<SymbolInformation[]>;
    protected publish(symbolInformations: SymbolInformation[]): void;
    protected parentContains(symbol: SymbolInformation, parent: SymbolInformation, rangeBased: boolean): boolean;
    protected getRangeFromSymbolInformation(symbolInformation: SymbolInformation): Range;
    protected createNode(symbol: SymbolInformation, ids: Map<string, number>): MonacoOutlineSymbolInformationNode;
    protected createId(name: string, ids: Map<string, number>): string;
    protected shouldExpand(symbol: SymbolInformation): boolean;
    protected orderByPosition(symbol1: SymbolInformation, symbol2: SymbolInformation): number;
}
export declare namespace MonacoOutlineContribution {
    interface NodeAndSymbol {
        node: MonacoOutlineSymbolInformationNode;
        symbol: SymbolInformation;
    }
}
export interface MonacoOutlineSymbolInformationNode extends OutlineSymbolInformationNode {
    uri: string;
    range: Range;
}
export declare namespace MonacoOutlineSymbolInformationNode {
    function is(node: TreeNode): node is MonacoOutlineSymbolInformationNode;
}
//# sourceMappingURL=monaco-outline-contribution.d.ts.map