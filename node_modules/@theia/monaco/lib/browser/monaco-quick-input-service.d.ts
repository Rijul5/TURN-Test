import { MonacoQuickOpenService } from "./monaco-quick-open-service";
export interface QuickInputOptions {
    /**
     * The prefill value.
     */
    value?: string;
    /**
     * The text to display under the input box.
     */
    prompt?: string;
    /**
     * The place holder in the input box to guide the user what to type.
     */
    placeHolder?: string;
    /**
     * Set to `true` to show a password prompt that will not show the typed value.
     */
    password?: boolean;
    /**
     * Set to `true` to keep the input box open when focus moves to another part of the editor or to another window.
     */
    ignoreFocusOut?: boolean;
    /**
     * An optional function that will be called to validate input and to give a hint
     * to the user.
     *
     * @param value The current value of the input box.
     * @return Return `undefined`, or the empty string when 'value' is valid.
     */
    validateInput?(value: string): string | undefined | PromiseLike<string | undefined>;
}
export declare class QuickInputService {
    private opts;
    protected readonly quickOpenService: MonacoQuickOpenService;
    open(options: QuickInputOptions): Promise<string | undefined>;
    private createPrompt;
    private validateInput;
    private setValidationState;
}
//# sourceMappingURL=monaco-quick-input-service.d.ts.map