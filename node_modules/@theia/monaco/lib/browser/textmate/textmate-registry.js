"use strict";
/********************************************************************************
 * Copyright (C) 2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var TextmateRegistry = /** @class */ (function () {
    function TextmateRegistry() {
        this.scopeToProvider = new Map();
        this.languageToConfig = new Map();
        this.languageIdToScope = new Map();
    }
    TextmateRegistry.prototype.registerTextMateGrammarScope = function (scope, provider) {
        if (this.scopeToProvider.has(scope)) {
            console.warn(new Error("a registered grammar provider for '" + scope + "' scope is overriden"));
        }
        this.scopeToProvider.set(scope, provider);
    };
    TextmateRegistry.prototype.getProvider = function (scope) {
        return this.scopeToProvider.get(scope);
    };
    TextmateRegistry.prototype.mapLanguageIdToTextmateGrammar = function (languageId, scope) {
        var existingScope = this.getScope(languageId);
        if (typeof existingScope === "string") {
            console.warn(new Error("'" + languageId + "' language is remapped from '" + existingScope + "' to '" + scope + "' scope"));
        }
        this.languageIdToScope.set(languageId, scope);
    };
    TextmateRegistry.prototype.getScope = function (languageId) {
        return this.languageIdToScope.get(languageId);
    };
    TextmateRegistry.prototype.registerGrammarConfiguration = function (languageId, config) {
        if (this.languageToConfig.has(languageId)) {
            console.warn(new Error("a registered grammar configuration for '" + languageId + "' language is overriden"));
        }
        this.languageToConfig.set(languageId, config);
    };
    TextmateRegistry.prototype.getGrammarConfiguration = function (languageId) {
        return this.languageToConfig.get(languageId) || {};
    };
    TextmateRegistry = __decorate([
        inversify_1.injectable()
    ], TextmateRegistry);
    return TextmateRegistry;
}());
exports.TextmateRegistry = TextmateRegistry;
//# sourceMappingURL=textmate-registry.js.map