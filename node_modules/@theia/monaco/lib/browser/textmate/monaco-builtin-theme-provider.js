"use strict";
/********************************************************************************
 * Copyright (C) 2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var BuiltinMonacoThemeProvider = /** @class */ (function () {
    function BuiltinMonacoThemeProvider() {
    }
    BuiltinMonacoThemeProvider.compileMonacoThemes = function () {
        var _this = this;
        [
            'light-plus', 'dark-plus',
        ].forEach(function (name) {
            var rawName = _this.nameMap[name] || name;
            var theme = _this.convertVscodeToMonaco(_this.rawThemes["./" + rawName + ".json"], {
                name: name,
                base: _this.baseMap[name] || 'vs-dark',
                inherit: true,
                rules: [],
                colors: {},
            });
            monaco.editor.defineTheme(theme.name, theme);
        });
    };
    // tslint:disable-next-line:no-any
    BuiltinMonacoThemeProvider.convertVscodeToMonaco = function (vscodeTheme, monacoTheme) {
        var e_1, _a;
        // Recursion in order to follow the theme dependencies that vscode has...
        if (typeof vscodeTheme.include !== 'undefined') {
            var subTheme = this.rawThemes[vscodeTheme.include];
            if (subTheme) {
                this.convertVscodeToMonaco(subTheme, monacoTheme);
            }
        }
        Object.assign(monacoTheme.colors, vscodeTheme.colors);
        if (typeof vscodeTheme.tokenColors !== 'undefined') {
            var _loop_1 = function (tokenColor) {
                var e_2, _a;
                if (typeof tokenColor.scope === 'undefined') {
                    tokenColor.scope = [''];
                }
                else if (typeof tokenColor.scope === 'string') {
                    // tokenColor.scope = tokenColor.scope.split(',').map((scope: string) => scope.trim()); // ?
                    tokenColor.scope = [tokenColor.scope];
                }
                try {
                    for (var _b = __values(tokenColor.scope), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var scope = _c.value;
                        // Converting numbers into a format that monaco understands
                        var settings = Object.keys(tokenColor.settings).reduce(function (previous, current) {
                            var value = tokenColor.settings[current];
                            if (typeof value === typeof '') {
                                value = value.replace(/^\#/, '').slice(0, 6);
                            }
                            previous[current] = value;
                            return previous;
                        }, {});
                        monacoTheme.rules.push(__assign({}, settings, { token: scope }));
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            };
            try {
                for (var _b = __values(vscodeTheme.tokenColors), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var tokenColor = _c.value;
                    _loop_1(tokenColor);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return monacoTheme;
    };
    BuiltinMonacoThemeProvider.rawThemes = {
        './dark_default.json': require('../../../data/monaco-themes/vscode/dark_defaults.json'),
        './dark_vs.json': require('../../../data/monaco-themes/vscode/dark_vs.json'),
        './dark_plus.json': require('../../../data/monaco-themes/vscode/dark_plus.json'),
        './light_default.json': require('../../../data/monaco-themes/vscode/light_defaults.json'),
        './light_vs.json': require('../../../data/monaco-themes/vscode/light_vs.json'),
        './light_plus.json': require('../../../data/monaco-themes/vscode/light_plus.json'),
    };
    BuiltinMonacoThemeProvider.nameMap = {
        'light-plus': 'light_plus',
        'dark-plus': 'dark_plus',
    };
    BuiltinMonacoThemeProvider.baseMap = {
        'light-plus': 'vs',
    };
    return BuiltinMonacoThemeProvider;
}());
exports.BuiltinMonacoThemeProvider = BuiltinMonacoThemeProvider;
//# sourceMappingURL=monaco-builtin-theme-provider.js.map